generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(cuid())
  googleId           String          @unique
  email              String          @unique
  name               String
  avatar             String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  mobileNumber       String?
  gender             String?
  city               String?
  state              String?
  country            String?
  dob                DateTime?
  phone              String?
  isVerified         Boolean         @default(false)
  isDeleted          Boolean         @default(false)
  language           String?
  preferredLanguage  String?
  refreshToken       String?
  
  // Relationships
  sessions           Session[]       @relation("UserSessions")
  reviews            Review[]        @relation("UserReviews")
  education          Education[]     @relation("UserEducation")
  socialMedia        SocialMedia[]   @relation("UserSocialMedia")
  skillExchanges     SkillExchange[] @relation("UserSkillExchange")
  meetings           Meeting[]       @relation("UserMeetings")
}

model SocialMedia {
  id                 String          @id @default(cuid())
  userId             String
  platform           String
  url                String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Relationships
  user               User            @relation("UserSocialMedia", fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id                 String          @id @default(cuid())
  userId             String
  review             String
  description        String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Relationships
  user               User            @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id                 String          @id @default(cuid())
  userId             String
  institute          String
  degree             String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Relationships
  user               User            @relation("UserEducation", fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id                 String          @id @default(cuid())
  sessionToken       String          @unique
  userId             String
  expires            DateTime
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Relationships
  user               User            @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
}

model SkillExchange {
  id                 String          @id @default(cuid())
  userId             String
  offeredSkill       String
  requestedSkill     String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Relationships
  user               User            @relation("UserSkillExchange", fields: [userId], references: [id], onDelete: Cascade)
}

model Meeting {
  id                 String          @id @default(cuid())
  userId             String
  googleCalendarId   String
  meetingLink        String
  startTime          DateTime
  endTime            DateTime
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Relationships
  user               User            @relation("UserMeetings", fields: [userId], references: [id], onDelete: Cascade)
}
