generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(cuid())
  googleId           String          @unique
  email              String          @unique
  name               String
  avatar             String
  about              String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  mobileNumber       String?
  gender             String?
  city               String?
  state              String?
  country            String?
  dob                String?
  phone              String?
  isVerified         Boolean         @default(false)
  isDeleted          Boolean         @default(false)
  language           String?
  preferredLanguage  String?
  refreshToken       String?         
  accessToken        String?

  // Relationships
  sessions           Session[]       @relation("UserSessions")
  reviews            Review[]        @relation("UserReviews")
  education          Education[]     @relation("UserEducation")
  socialMedia        SocialMedia[]   @relation("UserSocialMedia")
  skillExchanges     SkillExchange[] @relation("UserSkillExchange")
  meetings           Meeting[]       @relation("UserMeetings")
  
  // Connection relationships
  connections        UserConnection[] @relation("UserToConnection")
  connectedTo        UserConnection[] @relation("ConnectionToUser")
  
  // Connection request relationships
  sentRequests       UserConnectionRequest[] @relation("SentConnectionRequests")
  receivedRequests   UserConnectionRequest[] @relation("ReceivedConnectionRequests")
}

model SocialMedia {
  id                 String          @id @default(cuid())
  userId             String          @unique
  github             String?
  linkedin           String?
  twitter            String?
  website            String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Relationships
  user               User            @relation("UserSocialMedia", fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id                 String          @id @default(cuid())
  userId             String
  review             String
  description        String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Relationships
  user               User            @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id                 String          @id @default(cuid())
  userId             String           
  institute          String
  degree             String?
  fieldOfStudy       String?
  startDate          DateTime
  endDate            DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Relationships
  user               User            @relation("UserEducation", fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id                 String          @id @default(cuid())
  sessionToken       String          @unique
  userId             String
  expires            DateTime
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Relationships
  user               User            @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
}

model SkillExchange {
  id                 String          @id @default(cuid())
  userId             String          @unique
  offeredSkill       String
  requestedSkill     String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Relationships
  user               User            @relation("UserSkillExchange", fields: [userId], references: [id], onDelete: Cascade)
}

model Meeting {
  id                 String          @id @default(cuid())
  userId             String
  googleCalendarId   String
  meetingLink        String
  startTime          DateTime
  endTime            DateTime
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Relationships
  user               User            @relation("UserMeetings", fields: [userId], references: [id], onDelete: Cascade)
}

model UserConnection {
  id           String   @id @default(cuid())
  userId       String
  connectionId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Fixed relationships with distinct names
  user        User     @relation("UserToConnection", fields: [userId], references: [id], onDelete: Cascade)
  connection  User     @relation("ConnectionToUser", fields: [connectionId], references: [id], onDelete: Cascade)
}

model UserConnectionRequest {
  id                 String          @id @default(cuid())
  userId             String
  requestedUserId    String
  status             String          @default("pending")
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Fixed relationships with distinct names
  sender             User            @relation("SentConnectionRequests", fields: [userId], references: [id], onDelete: Cascade)
  receiver           User            @relation("ReceivedConnectionRequests", fields: [requestedUserId], references: [id], onDelete: Cascade)
}

